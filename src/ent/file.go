// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gosfV2/src/ent/file"
	"gosfV2/src/ent/note"
	"gosfV2/src/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename"`
	// IsDir holds the value of the "is_dir" field.
	IsDir bool `json:"is_dir"`
	// IsShared holds the value of the "is_shared" field.
	IsShared bool `json:"shared"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges         FileEdges `json:"edges"`
	file_children *uint
	note_files    *uint
	user_files    *uint
	selectValues  sql.SelectValues
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// SharedWith holds the value of the shared_with edge.
	SharedWith []*User `json:"shared_with,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *File `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*File `json:"children,omitempty"`
	// Notes holds the value of the notes edge.
	Notes *Note `json:"notes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// SharedWithOrErr returns the SharedWith value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) SharedWithOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.SharedWith, nil
	}
	return nil, &NotLoadedError{edge: "shared_with"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) ParentOrErr() (*File, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ChildrenOrErr() ([]*File, error) {
	if e.loadedTypes[3] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) NotesOrErr() (*Note, error) {
	if e.loadedTypes[4] {
		if e.Notes == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: note.Label}
		}
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldIsDir, file.FieldIsShared:
			values[i] = new(sql.NullBool)
		case file.FieldID:
			values[i] = new(sql.NullInt64)
		case file.FieldFilename:
			values[i] = new(sql.NullString)
		case file.FieldCreatedAt, file.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case file.ForeignKeys[0]: // file_children
			values[i] = new(sql.NullInt64)
		case file.ForeignKeys[1]: // note_files
			values[i] = new(sql.NullInt64)
		case file.ForeignKeys[2]: // user_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = uint(value.Int64)
		case file.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case file.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = new(time.Time)
				*f.UpdatedAt = value.Time
			}
		case file.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				f.Filename = value.String
			}
		case file.FieldIsDir:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_dir", values[i])
			} else if value.Valid {
				f.IsDir = value.Bool
			}
		case file.FieldIsShared:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_shared", values[i])
			} else if value.Valid {
				f.IsShared = value.Bool
			}
		case file.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_children", value)
			} else if value.Valid {
				f.file_children = new(uint)
				*f.file_children = uint(value.Int64)
			}
		case file.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field note_files", value)
			} else if value.Valid {
				f.note_files = new(uint)
				*f.note_files = uint(value.Int64)
			}
		case file.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_files", value)
			} else if value.Valid {
				f.user_files = new(uint)
				*f.user_files = uint(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the File.
// This includes values selected through modifiers, order, etc.
func (f *File) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the File entity.
func (f *File) QueryOwner() *UserQuery {
	return NewFileClient(f.config).QueryOwner(f)
}

// QuerySharedWith queries the "shared_with" edge of the File entity.
func (f *File) QuerySharedWith() *UserQuery {
	return NewFileClient(f.config).QuerySharedWith(f)
}

// QueryParent queries the "parent" edge of the File entity.
func (f *File) QueryParent() *FileQuery {
	return NewFileClient(f.config).QueryParent(f)
}

// QueryChildren queries the "children" edge of the File entity.
func (f *File) QueryChildren() *FileQuery {
	return NewFileClient(f.config).QueryChildren(f)
}

// QueryNotes queries the "notes" edge of the File entity.
func (f *File) QueryNotes() *NoteQuery {
	return NewFileClient(f.config).QueryNotes(f)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return NewFileClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(f.Filename)
	builder.WriteString(", ")
	builder.WriteString("is_dir=")
	builder.WriteString(fmt.Sprintf("%v", f.IsDir))
	builder.WriteString(", ")
	builder.WriteString("is_shared=")
	builder.WriteString(fmt.Sprintf("%v", f.IsShared))
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File
