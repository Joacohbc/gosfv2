// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gosfV2/src/ent/file"
	"gosfV2/src/ent/note"
	"gosfV2/src/ent/predicate"
	"gosfV2/src/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fu *FileUpdate) ClearUpdatedAt() *FileUpdate {
	fu.mutation.ClearUpdatedAt()
	return fu
}

// SetFilename sets the "filename" field.
func (fu *FileUpdate) SetFilename(s string) *FileUpdate {
	fu.mutation.SetFilename(s)
	return fu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFilename(s *string) *FileUpdate {
	if s != nil {
		fu.SetFilename(*s)
	}
	return fu
}

// SetIsDir sets the "is_dir" field.
func (fu *FileUpdate) SetIsDir(b bool) *FileUpdate {
	fu.mutation.SetIsDir(b)
	return fu
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (fu *FileUpdate) SetNillableIsDir(b *bool) *FileUpdate {
	if b != nil {
		fu.SetIsDir(*b)
	}
	return fu
}

// SetIsShared sets the "is_shared" field.
func (fu *FileUpdate) SetIsShared(b bool) *FileUpdate {
	fu.mutation.SetIsShared(b)
	return fu
}

// SetNillableIsShared sets the "is_shared" field if the given value is not nil.
func (fu *FileUpdate) SetNillableIsShared(b *bool) *FileUpdate {
	if b != nil {
		fu.SetIsShared(*b)
	}
	return fu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fu *FileUpdate) SetOwnerID(id uint) *FileUpdate {
	fu.mutation.SetOwnerID(id)
	return fu
}

// SetOwner sets the "owner" edge to the User entity.
func (fu *FileUpdate) SetOwner(u *User) *FileUpdate {
	return fu.SetOwnerID(u.ID)
}

// AddSharedWithIDs adds the "shared_with" edge to the User entity by IDs.
func (fu *FileUpdate) AddSharedWithIDs(ids ...uint) *FileUpdate {
	fu.mutation.AddSharedWithIDs(ids...)
	return fu
}

// AddSharedWith adds the "shared_with" edges to the User entity.
func (fu *FileUpdate) AddSharedWith(u ...*User) *FileUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddSharedWithIDs(ids...)
}

// SetChildrenID sets the "children" edge to the File entity by ID.
func (fu *FileUpdate) SetChildrenID(id uint) *FileUpdate {
	fu.mutation.SetChildrenID(id)
	return fu
}

// SetNillableChildrenID sets the "children" edge to the File entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableChildrenID(id *uint) *FileUpdate {
	if id != nil {
		fu = fu.SetChildrenID(*id)
	}
	return fu
}

// SetChildren sets the "children" edge to the File entity.
func (fu *FileUpdate) SetChildren(f *File) *FileUpdate {
	return fu.SetChildrenID(f.ID)
}

// AddParentIDs adds the "parent" edge to the File entity by IDs.
func (fu *FileUpdate) AddParentIDs(ids ...uint) *FileUpdate {
	fu.mutation.AddParentIDs(ids...)
	return fu
}

// AddParent adds the "parent" edges to the File entity.
func (fu *FileUpdate) AddParent(f ...*File) *FileUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddParentIDs(ids...)
}

// SetNotesID sets the "notes" edge to the Note entity by ID.
func (fu *FileUpdate) SetNotesID(id uint) *FileUpdate {
	fu.mutation.SetNotesID(id)
	return fu
}

// SetNillableNotesID sets the "notes" edge to the Note entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableNotesID(id *uint) *FileUpdate {
	if id != nil {
		fu = fu.SetNotesID(*id)
	}
	return fu
}

// SetNotes sets the "notes" edge to the Note entity.
func (fu *FileUpdate) SetNotes(n *Note) *FileUpdate {
	return fu.SetNotesID(n.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fu *FileUpdate) ClearOwner() *FileUpdate {
	fu.mutation.ClearOwner()
	return fu
}

// ClearSharedWith clears all "shared_with" edges to the User entity.
func (fu *FileUpdate) ClearSharedWith() *FileUpdate {
	fu.mutation.ClearSharedWith()
	return fu
}

// RemoveSharedWithIDs removes the "shared_with" edge to User entities by IDs.
func (fu *FileUpdate) RemoveSharedWithIDs(ids ...uint) *FileUpdate {
	fu.mutation.RemoveSharedWithIDs(ids...)
	return fu
}

// RemoveSharedWith removes "shared_with" edges to User entities.
func (fu *FileUpdate) RemoveSharedWith(u ...*User) *FileUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveSharedWithIDs(ids...)
}

// ClearChildren clears the "children" edge to the File entity.
func (fu *FileUpdate) ClearChildren() *FileUpdate {
	fu.mutation.ClearChildren()
	return fu
}

// ClearParent clears all "parent" edges to the File entity.
func (fu *FileUpdate) ClearParent() *FileUpdate {
	fu.mutation.ClearParent()
	return fu
}

// RemoveParentIDs removes the "parent" edge to File entities by IDs.
func (fu *FileUpdate) RemoveParentIDs(ids ...uint) *FileUpdate {
	fu.mutation.RemoveParentIDs(ids...)
	return fu
}

// RemoveParent removes "parent" edges to File entities.
func (fu *FileUpdate) RemoveParent(f ...*File) *FileUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveParentIDs(ids...)
}

// ClearNotes clears the "notes" edge to the Note entity.
func (fu *FileUpdate) ClearNotes() *FileUpdate {
	fu.mutation.ClearNotes()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok && !fu.mutation.UpdatedAtCleared() {
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.Filename(); ok {
		if err := file.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "File.filename": %w`, err)}
		}
	}
	if _, ok := fu.mutation.OwnerID(); fu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "File.owner"`)
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fu.mutation.IsDir(); ok {
		_spec.SetField(file.FieldIsDir, field.TypeBool, value)
	}
	if value, ok := fu.mutation.IsShared(); ok {
		_spec.SetField(file.FieldIsShared, field.TypeBool, value)
	}
	if fu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.OwnerTable,
			Columns: []string{file.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.OwnerTable,
			Columns: []string{file.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSharedWithIDs(); len(nodes) > 0 && !fu.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SharedWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedParentIDs(); len(nodes) > 0 && !fu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.NotesTable,
			Columns: []string{file.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.NotesTable,
			Columns: []string{file.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuo *FileUpdateOne) ClearUpdatedAt() *FileUpdateOne {
	fuo.mutation.ClearUpdatedAt()
	return fuo
}

// SetFilename sets the "filename" field.
func (fuo *FileUpdateOne) SetFilename(s string) *FileUpdateOne {
	fuo.mutation.SetFilename(s)
	return fuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFilename(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFilename(*s)
	}
	return fuo
}

// SetIsDir sets the "is_dir" field.
func (fuo *FileUpdateOne) SetIsDir(b bool) *FileUpdateOne {
	fuo.mutation.SetIsDir(b)
	return fuo
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableIsDir(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetIsDir(*b)
	}
	return fuo
}

// SetIsShared sets the "is_shared" field.
func (fuo *FileUpdateOne) SetIsShared(b bool) *FileUpdateOne {
	fuo.mutation.SetIsShared(b)
	return fuo
}

// SetNillableIsShared sets the "is_shared" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableIsShared(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetIsShared(*b)
	}
	return fuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fuo *FileUpdateOne) SetOwnerID(id uint) *FileUpdateOne {
	fuo.mutation.SetOwnerID(id)
	return fuo
}

// SetOwner sets the "owner" edge to the User entity.
func (fuo *FileUpdateOne) SetOwner(u *User) *FileUpdateOne {
	return fuo.SetOwnerID(u.ID)
}

// AddSharedWithIDs adds the "shared_with" edge to the User entity by IDs.
func (fuo *FileUpdateOne) AddSharedWithIDs(ids ...uint) *FileUpdateOne {
	fuo.mutation.AddSharedWithIDs(ids...)
	return fuo
}

// AddSharedWith adds the "shared_with" edges to the User entity.
func (fuo *FileUpdateOne) AddSharedWith(u ...*User) *FileUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddSharedWithIDs(ids...)
}

// SetChildrenID sets the "children" edge to the File entity by ID.
func (fuo *FileUpdateOne) SetChildrenID(id uint) *FileUpdateOne {
	fuo.mutation.SetChildrenID(id)
	return fuo
}

// SetNillableChildrenID sets the "children" edge to the File entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableChildrenID(id *uint) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetChildrenID(*id)
	}
	return fuo
}

// SetChildren sets the "children" edge to the File entity.
func (fuo *FileUpdateOne) SetChildren(f *File) *FileUpdateOne {
	return fuo.SetChildrenID(f.ID)
}

// AddParentIDs adds the "parent" edge to the File entity by IDs.
func (fuo *FileUpdateOne) AddParentIDs(ids ...uint) *FileUpdateOne {
	fuo.mutation.AddParentIDs(ids...)
	return fuo
}

// AddParent adds the "parent" edges to the File entity.
func (fuo *FileUpdateOne) AddParent(f ...*File) *FileUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddParentIDs(ids...)
}

// SetNotesID sets the "notes" edge to the Note entity by ID.
func (fuo *FileUpdateOne) SetNotesID(id uint) *FileUpdateOne {
	fuo.mutation.SetNotesID(id)
	return fuo
}

// SetNillableNotesID sets the "notes" edge to the Note entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableNotesID(id *uint) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetNotesID(*id)
	}
	return fuo
}

// SetNotes sets the "notes" edge to the Note entity.
func (fuo *FileUpdateOne) SetNotes(n *Note) *FileUpdateOne {
	return fuo.SetNotesID(n.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fuo *FileUpdateOne) ClearOwner() *FileUpdateOne {
	fuo.mutation.ClearOwner()
	return fuo
}

// ClearSharedWith clears all "shared_with" edges to the User entity.
func (fuo *FileUpdateOne) ClearSharedWith() *FileUpdateOne {
	fuo.mutation.ClearSharedWith()
	return fuo
}

// RemoveSharedWithIDs removes the "shared_with" edge to User entities by IDs.
func (fuo *FileUpdateOne) RemoveSharedWithIDs(ids ...uint) *FileUpdateOne {
	fuo.mutation.RemoveSharedWithIDs(ids...)
	return fuo
}

// RemoveSharedWith removes "shared_with" edges to User entities.
func (fuo *FileUpdateOne) RemoveSharedWith(u ...*User) *FileUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveSharedWithIDs(ids...)
}

// ClearChildren clears the "children" edge to the File entity.
func (fuo *FileUpdateOne) ClearChildren() *FileUpdateOne {
	fuo.mutation.ClearChildren()
	return fuo
}

// ClearParent clears all "parent" edges to the File entity.
func (fuo *FileUpdateOne) ClearParent() *FileUpdateOne {
	fuo.mutation.ClearParent()
	return fuo
}

// RemoveParentIDs removes the "parent" edge to File entities by IDs.
func (fuo *FileUpdateOne) RemoveParentIDs(ids ...uint) *FileUpdateOne {
	fuo.mutation.RemoveParentIDs(ids...)
	return fuo
}

// RemoveParent removes "parent" edges to File entities.
func (fuo *FileUpdateOne) RemoveParent(f ...*File) *FileUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveParentIDs(ids...)
}

// ClearNotes clears the "notes" edge to the Note entity.
func (fuo *FileUpdateOne) ClearNotes() *FileUpdateOne {
	fuo.mutation.ClearNotes()
	return fuo
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok && !fuo.mutation.UpdatedAtCleared() {
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.Filename(); ok {
		if err := file.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "File.filename": %w`, err)}
		}
	}
	if _, ok := fuo.mutation.OwnerID(); fuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "File.owner"`)
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fuo.mutation.IsDir(); ok {
		_spec.SetField(file.FieldIsDir, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.IsShared(); ok {
		_spec.SetField(file.FieldIsShared, field.TypeBool, value)
	}
	if fuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.OwnerTable,
			Columns: []string{file.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.OwnerTable,
			Columns: []string{file.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSharedWithIDs(); len(nodes) > 0 && !fuo.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SharedWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SharedWithTable,
			Columns: file.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !fuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.NotesTable,
			Columns: []string{file.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.NotesTable,
			Columns: []string{file.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
