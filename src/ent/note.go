// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gosfV2/src/ent/note"
	"gosfV2/src/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Note is the model entity for the Note schema.
type Note struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Content holds the value of the "content" field.
	Content string `json:"content"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoteQuery when eager-loading is set.
	Edges        NoteEdges `json:"edges"`
	note_parent  *uint
	user_notes   *uint
	selectValues sql.SelectValues
}

// NoteEdges holds the relations/edges for other nodes in the graph.
type NoteEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// SharedWith holds the value of the shared_with edge.
	SharedWith []*User `json:"shared_with,omitempty"`
	// Children holds the value of the children edge.
	Children *Note `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent []*Note `json:"parent,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// SharedWithOrErr returns the SharedWith value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) SharedWithOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.SharedWith, nil
	}
	return nil, &NotLoadedError{edge: "shared_with"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) ChildrenOrErr() (*Note, error) {
	if e.loadedTypes[2] {
		if e.Children == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: note.Label}
		}
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) ParentOrErr() ([]*Note, error) {
	if e.loadedTypes[3] {
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[4] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Note) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case note.FieldID:
			values[i] = new(sql.NullInt64)
		case note.FieldTitle, note.FieldContent:
			values[i] = new(sql.NullString)
		case note.FieldCreatedAt, note.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case note.ForeignKeys[0]: // note_parent
			values[i] = new(sql.NullInt64)
		case note.ForeignKeys[1]: // user_notes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Note fields.
func (n *Note) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case note.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint(value.Int64)
		case note.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case note.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = new(time.Time)
				*n.UpdatedAt = value.Time
			}
		case note.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case note.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = value.String
			}
		case note.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field note_parent", value)
			} else if value.Valid {
				n.note_parent = new(uint)
				*n.note_parent = uint(value.Int64)
			}
		case note.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notes", value)
			} else if value.Valid {
				n.user_notes = new(uint)
				*n.user_notes = uint(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Note.
// This includes values selected through modifiers, order, etc.
func (n *Note) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Note entity.
func (n *Note) QueryOwner() *UserQuery {
	return NewNoteClient(n.config).QueryOwner(n)
}

// QuerySharedWith queries the "shared_with" edge of the Note entity.
func (n *Note) QuerySharedWith() *UserQuery {
	return NewNoteClient(n.config).QuerySharedWith(n)
}

// QueryChildren queries the "children" edge of the Note entity.
func (n *Note) QueryChildren() *NoteQuery {
	return NewNoteClient(n.config).QueryChildren(n)
}

// QueryParent queries the "parent" edge of the Note entity.
func (n *Note) QueryParent() *NoteQuery {
	return NewNoteClient(n.config).QueryParent(n)
}

// QueryFiles queries the "files" edge of the Note entity.
func (n *Note) QueryFiles() *FileQuery {
	return NewNoteClient(n.config).QueryFiles(n)
}

// Update returns a builder for updating this Note.
// Note that you need to call Note.Unwrap() before calling this method if this Note
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Note) Update() *NoteUpdateOne {
	return NewNoteClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Note entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Note) Unwrap() *Note {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Note is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Note) String() string {
	var builder strings.Builder
	builder.WriteString("Note(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := n.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(n.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(n.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Notes is a parsable slice of Note.
type Notes []*Note
