// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gosfV2/src/ent/file"
	"gosfV2/src/ent/note"
	"gosfV2/src/ent/predicate"
	"gosfV2/src/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NoteUpdate is the builder for updating Note entities.
type NoteUpdate struct {
	config
	hooks    []Hook
	mutation *NoteMutation
}

// Where appends a list predicates to the NoteUpdate builder.
func (nu *NoteUpdate) Where(ps ...predicate.Note) *NoteUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NoteUpdate) SetUpdatedAt(t time.Time) *NoteUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NoteUpdate) ClearUpdatedAt() *NoteUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// SetTitle sets the "title" field.
func (nu *NoteUpdate) SetTitle(s string) *NoteUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableTitle(s *string) *NoteUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// SetContent sets the "content" field.
func (nu *NoteUpdate) SetContent(s string) *NoteUpdate {
	nu.mutation.SetContent(s)
	return nu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableContent(s *string) *NoteUpdate {
	if s != nil {
		nu.SetContent(*s)
	}
	return nu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nu *NoteUpdate) SetOwnerID(id uint) *NoteUpdate {
	nu.mutation.SetOwnerID(id)
	return nu
}

// SetOwner sets the "owner" edge to the User entity.
func (nu *NoteUpdate) SetOwner(u *User) *NoteUpdate {
	return nu.SetOwnerID(u.ID)
}

// AddSharedWithIDs adds the "shared_with" edge to the User entity by IDs.
func (nu *NoteUpdate) AddSharedWithIDs(ids ...uint) *NoteUpdate {
	nu.mutation.AddSharedWithIDs(ids...)
	return nu
}

// AddSharedWith adds the "shared_with" edges to the User entity.
func (nu *NoteUpdate) AddSharedWith(u ...*User) *NoteUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nu.AddSharedWithIDs(ids...)
}

// SetChildrenID sets the "children" edge to the Note entity by ID.
func (nu *NoteUpdate) SetChildrenID(id uint) *NoteUpdate {
	nu.mutation.SetChildrenID(id)
	return nu
}

// SetNillableChildrenID sets the "children" edge to the Note entity by ID if the given value is not nil.
func (nu *NoteUpdate) SetNillableChildrenID(id *uint) *NoteUpdate {
	if id != nil {
		nu = nu.SetChildrenID(*id)
	}
	return nu
}

// SetChildren sets the "children" edge to the Note entity.
func (nu *NoteUpdate) SetChildren(n *Note) *NoteUpdate {
	return nu.SetChildrenID(n.ID)
}

// AddParentIDs adds the "parent" edge to the Note entity by IDs.
func (nu *NoteUpdate) AddParentIDs(ids ...uint) *NoteUpdate {
	nu.mutation.AddParentIDs(ids...)
	return nu
}

// AddParent adds the "parent" edges to the Note entity.
func (nu *NoteUpdate) AddParent(n ...*Note) *NoteUpdate {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddParentIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (nu *NoteUpdate) AddFileIDs(ids ...uint) *NoteUpdate {
	nu.mutation.AddFileIDs(ids...)
	return nu
}

// AddFiles adds the "files" edges to the File entity.
func (nu *NoteUpdate) AddFiles(f ...*File) *NoteUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nu.AddFileIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nu *NoteUpdate) Mutation() *NoteMutation {
	return nu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nu *NoteUpdate) ClearOwner() *NoteUpdate {
	nu.mutation.ClearOwner()
	return nu
}

// ClearSharedWith clears all "shared_with" edges to the User entity.
func (nu *NoteUpdate) ClearSharedWith() *NoteUpdate {
	nu.mutation.ClearSharedWith()
	return nu
}

// RemoveSharedWithIDs removes the "shared_with" edge to User entities by IDs.
func (nu *NoteUpdate) RemoveSharedWithIDs(ids ...uint) *NoteUpdate {
	nu.mutation.RemoveSharedWithIDs(ids...)
	return nu
}

// RemoveSharedWith removes "shared_with" edges to User entities.
func (nu *NoteUpdate) RemoveSharedWith(u ...*User) *NoteUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nu.RemoveSharedWithIDs(ids...)
}

// ClearChildren clears the "children" edge to the Note entity.
func (nu *NoteUpdate) ClearChildren() *NoteUpdate {
	nu.mutation.ClearChildren()
	return nu
}

// ClearParent clears all "parent" edges to the Note entity.
func (nu *NoteUpdate) ClearParent() *NoteUpdate {
	nu.mutation.ClearParent()
	return nu
}

// RemoveParentIDs removes the "parent" edge to Note entities by IDs.
func (nu *NoteUpdate) RemoveParentIDs(ids ...uint) *NoteUpdate {
	nu.mutation.RemoveParentIDs(ids...)
	return nu
}

// RemoveParent removes "parent" edges to Note entities.
func (nu *NoteUpdate) RemoveParent(n ...*Note) *NoteUpdate {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveParentIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (nu *NoteUpdate) ClearFiles() *NoteUpdate {
	nu.mutation.ClearFiles()
	return nu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (nu *NoteUpdate) RemoveFileIDs(ids ...uint) *NoteUpdate {
	nu.mutation.RemoveFileIDs(ids...)
	return nu
}

// RemoveFiles removes "files" edges to File entities.
func (nu *NoteUpdate) RemoveFiles(f ...*File) *NoteUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NoteUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NoteUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NoteUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NoteUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NoteUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok && !nu.mutation.UpdatedAtCleared() {
		v := note.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NoteUpdate) check() error {
	if v, ok := nu.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Content(); ok {
		if err := note.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Note.content": %w`, err)}
		}
	}
	if _, ok := nu.mutation.OwnerID(); nu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Note.owner"`)
	}
	return nil
}

func (nu *NoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.ClearField(note.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if nu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedSharedWithIDs(); len(nodes) > 0 && !nu.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.SharedWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ChildrenTable,
			Columns: []string{note.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ChildrenTable,
			Columns: []string{note.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedParentIDs(); len(nodes) > 0 && !nu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !nu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NoteUpdateOne is the builder for updating a single Note entity.
type NoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NoteUpdateOne) SetUpdatedAt(t time.Time) *NoteUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NoteUpdateOne) ClearUpdatedAt() *NoteUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// SetTitle sets the "title" field.
func (nuo *NoteUpdateOne) SetTitle(s string) *NoteUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableTitle(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// SetContent sets the "content" field.
func (nuo *NoteUpdateOne) SetContent(s string) *NoteUpdateOne {
	nuo.mutation.SetContent(s)
	return nuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableContent(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetContent(*s)
	}
	return nuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nuo *NoteUpdateOne) SetOwnerID(id uint) *NoteUpdateOne {
	nuo.mutation.SetOwnerID(id)
	return nuo
}

// SetOwner sets the "owner" edge to the User entity.
func (nuo *NoteUpdateOne) SetOwner(u *User) *NoteUpdateOne {
	return nuo.SetOwnerID(u.ID)
}

// AddSharedWithIDs adds the "shared_with" edge to the User entity by IDs.
func (nuo *NoteUpdateOne) AddSharedWithIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.AddSharedWithIDs(ids...)
	return nuo
}

// AddSharedWith adds the "shared_with" edges to the User entity.
func (nuo *NoteUpdateOne) AddSharedWith(u ...*User) *NoteUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nuo.AddSharedWithIDs(ids...)
}

// SetChildrenID sets the "children" edge to the Note entity by ID.
func (nuo *NoteUpdateOne) SetChildrenID(id uint) *NoteUpdateOne {
	nuo.mutation.SetChildrenID(id)
	return nuo
}

// SetNillableChildrenID sets the "children" edge to the Note entity by ID if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableChildrenID(id *uint) *NoteUpdateOne {
	if id != nil {
		nuo = nuo.SetChildrenID(*id)
	}
	return nuo
}

// SetChildren sets the "children" edge to the Note entity.
func (nuo *NoteUpdateOne) SetChildren(n *Note) *NoteUpdateOne {
	return nuo.SetChildrenID(n.ID)
}

// AddParentIDs adds the "parent" edge to the Note entity by IDs.
func (nuo *NoteUpdateOne) AddParentIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.AddParentIDs(ids...)
	return nuo
}

// AddParent adds the "parent" edges to the Note entity.
func (nuo *NoteUpdateOne) AddParent(n ...*Note) *NoteUpdateOne {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddParentIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (nuo *NoteUpdateOne) AddFileIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.AddFileIDs(ids...)
	return nuo
}

// AddFiles adds the "files" edges to the File entity.
func (nuo *NoteUpdateOne) AddFiles(f ...*File) *NoteUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nuo.AddFileIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nuo *NoteUpdateOne) Mutation() *NoteMutation {
	return nuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nuo *NoteUpdateOne) ClearOwner() *NoteUpdateOne {
	nuo.mutation.ClearOwner()
	return nuo
}

// ClearSharedWith clears all "shared_with" edges to the User entity.
func (nuo *NoteUpdateOne) ClearSharedWith() *NoteUpdateOne {
	nuo.mutation.ClearSharedWith()
	return nuo
}

// RemoveSharedWithIDs removes the "shared_with" edge to User entities by IDs.
func (nuo *NoteUpdateOne) RemoveSharedWithIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.RemoveSharedWithIDs(ids...)
	return nuo
}

// RemoveSharedWith removes "shared_with" edges to User entities.
func (nuo *NoteUpdateOne) RemoveSharedWith(u ...*User) *NoteUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nuo.RemoveSharedWithIDs(ids...)
}

// ClearChildren clears the "children" edge to the Note entity.
func (nuo *NoteUpdateOne) ClearChildren() *NoteUpdateOne {
	nuo.mutation.ClearChildren()
	return nuo
}

// ClearParent clears all "parent" edges to the Note entity.
func (nuo *NoteUpdateOne) ClearParent() *NoteUpdateOne {
	nuo.mutation.ClearParent()
	return nuo
}

// RemoveParentIDs removes the "parent" edge to Note entities by IDs.
func (nuo *NoteUpdateOne) RemoveParentIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.RemoveParentIDs(ids...)
	return nuo
}

// RemoveParent removes "parent" edges to Note entities.
func (nuo *NoteUpdateOne) RemoveParent(n ...*Note) *NoteUpdateOne {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveParentIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (nuo *NoteUpdateOne) ClearFiles() *NoteUpdateOne {
	nuo.mutation.ClearFiles()
	return nuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (nuo *NoteUpdateOne) RemoveFileIDs(ids ...uint) *NoteUpdateOne {
	nuo.mutation.RemoveFileIDs(ids...)
	return nuo
}

// RemoveFiles removes "files" edges to File entities.
func (nuo *NoteUpdateOne) RemoveFiles(f ...*File) *NoteUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the NoteUpdate builder.
func (nuo *NoteUpdateOne) Where(ps ...predicate.Note) *NoteUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NoteUpdateOne) Select(field string, fields ...string) *NoteUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Note entity.
func (nuo *NoteUpdateOne) Save(ctx context.Context) (*Note, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NoteUpdateOne) SaveX(ctx context.Context) *Note {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NoteUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NoteUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NoteUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok && !nuo.mutation.UpdatedAtCleared() {
		v := note.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NoteUpdateOne) check() error {
	if v, ok := nuo.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Content(); ok {
		if err := note.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Note.content": %w`, err)}
		}
	}
	if _, ok := nuo.mutation.OwnerID(); nuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Note.owner"`)
	}
	return nil
}

func (nuo *NoteUpdateOne) sqlSave(ctx context.Context) (_node *Note, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Note.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, note.FieldID)
		for _, f := range fields {
			if !note.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != note.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(note.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if nuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedSharedWithIDs(); len(nodes) > 0 && !nuo.mutation.SharedWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.SharedWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SharedWithTable,
			Columns: note.SharedWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ChildrenTable,
			Columns: []string{note.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ChildrenTable,
			Columns: []string{note.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !nuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.ParentTable,
			Columns: []string{note.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !nuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Note{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
