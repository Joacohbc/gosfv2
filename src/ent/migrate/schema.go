// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "filename", Type: field.TypeString, Size: 255},
		{Name: "is_dir", Type: field.TypeBool, Default: false},
		{Name: "is_shared", Type: field.TypeBool, Default: false},
		{Name: "file_parent", Type: field.TypeUint, Nullable: true},
		{Name: "note_files", Type: field.TypeUint, Nullable: true},
		{Name: "user_files", Type: field.TypeUint},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_files_parent",
				Columns:    []*schema.Column{FilesColumns[6]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "files_notes_files",
				Columns:    []*schema.Column{FilesColumns[7]},
				RefColumns: []*schema.Column{NotesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "files_users_files",
				Columns:    []*schema.Column{FilesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NotesColumns holds the columns for the "notes" table.
	NotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "content", Type: field.TypeString},
		{Name: "note_parent", Type: field.TypeUint, Nullable: true},
		{Name: "user_notes", Type: field.TypeUint},
	}
	// NotesTable holds the schema information for the "notes" table.
	NotesTable = &schema.Table{
		Name:       "notes",
		Columns:    NotesColumns,
		PrimaryKey: []*schema.Column{NotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notes_notes_parent",
				Columns:    []*schema.Column{NotesColumns[5]},
				RefColumns: []*schema.Column{NotesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_users_notes",
				Columns:    []*schema.Column{NotesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// FileSharedWithColumns holds the columns for the "file_shared_with" table.
	FileSharedWithColumns = []*schema.Column{
		{Name: "file_id", Type: field.TypeUint},
		{Name: "user_id", Type: field.TypeUint},
	}
	// FileSharedWithTable holds the schema information for the "file_shared_with" table.
	FileSharedWithTable = &schema.Table{
		Name:       "file_shared_with",
		Columns:    FileSharedWithColumns,
		PrimaryKey: []*schema.Column{FileSharedWithColumns[0], FileSharedWithColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "file_shared_with_file_id",
				Columns:    []*schema.Column{FileSharedWithColumns[0]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "file_shared_with_user_id",
				Columns:    []*schema.Column{FileSharedWithColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NoteSharedWithColumns holds the columns for the "note_shared_with" table.
	NoteSharedWithColumns = []*schema.Column{
		{Name: "note_id", Type: field.TypeUint},
		{Name: "user_id", Type: field.TypeUint},
	}
	// NoteSharedWithTable holds the schema information for the "note_shared_with" table.
	NoteSharedWithTable = &schema.Table{
		Name:       "note_shared_with",
		Columns:    NoteSharedWithColumns,
		PrimaryKey: []*schema.Column{NoteSharedWithColumns[0], NoteSharedWithColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "note_shared_with_note_id",
				Columns:    []*schema.Column{NoteSharedWithColumns[0]},
				RefColumns: []*schema.Column{NotesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "note_shared_with_user_id",
				Columns:    []*schema.Column{NoteSharedWithColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FilesTable,
		NotesTable,
		UsersTable,
		FileSharedWithTable,
		NoteSharedWithTable,
	}
)

func init() {
	FilesTable.ForeignKeys[0].RefTable = FilesTable
	FilesTable.ForeignKeys[1].RefTable = NotesTable
	FilesTable.ForeignKeys[2].RefTable = UsersTable
	NotesTable.ForeignKeys[0].RefTable = NotesTable
	NotesTable.ForeignKeys[1].RefTable = UsersTable
	FileSharedWithTable.ForeignKeys[0].RefTable = FilesTable
	FileSharedWithTable.ForeignKeys[1].RefTable = UsersTable
	NoteSharedWithTable.ForeignKeys[0].RefTable = NotesTable
	NoteSharedWithTable.ForeignKeys[1].RefTable = UsersTable
}
