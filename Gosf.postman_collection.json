{
	"info": {
		"_postman_id": "6dd4ef57-b843-4396-a747-d62aad97e5e4",
		"name": "Gosf",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23891879",
		"_collection_link": "https://cloudy-rocket-58040.postman.co/workspace/Gosf-App-v2~3b2d4e56-38a9-484e-a2f9-b8fe2212be02/collection/23891879-6dd4ef57-b843-4396-a747-d62aad97e5e4?action=share&source=collection_link&creator=23891879"
	},
	"item": [
		{
			"name": "Files",
			"item": [
				{
					"name": "Shared",
					"item": [
						{
							"name": "Get Share",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:{{port}}/api/files/share/:fileId",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"files",
										"share",
										":fileId"
									],
									"variable": [
										{
											"key": "fileId",
											"value": "57"
										}
									]
								},
								"description": "### Download a Shared File\n\nDownloads a file that has been shared with the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** File downloaded successfully.\n    \n- **403 Forbidden:** The file is not shared with you, request access to the owner.\n    \n\n``` json\n{\n    \"message\": \"The file is not shared with you, request access to the owner\"\n}\n\n ```\n\n- **404 Not Found:** File not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
							},
							"response": []
						},
						{
							"name": "Get Share Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:{{port}}/api/files/share/:fileId/info",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"files",
										"share",
										":fileId",
										"info"
									],
									"variable": [
										{
											"key": "fileId",
											"value": "57"
										}
									]
								},
								"description": "### Get Shared File Information\n\nRetrieves information about a file that has been shared with the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Shared file information retrieved successfully.\n    \n- **403 Forbidden:** The file is not shared with you, request access to the owner.\n    \n\n``` json\n{\n    \"message\": \"The file is not shared with you, request access to the owner\"\n}\n\n ```\n\n- **404 Not Found:** File not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
							},
							"response": []
						},
						{
							"name": "Add User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:{{port}}/api/files/share/:idFile/user/:idUser",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"files",
										"share",
										":idFile",
										"user",
										":idUser"
									],
									"variable": [
										{
											"key": "idFile",
											"value": "57",
											"description": "3"
										},
										{
											"key": "idUser",
											"value": "3"
										}
									]
								},
								"description": "### Add User to File\n\nAdds a user to the share list of a file. The authenticated user must be the owner of the file.\n\n**Possible Responses:**\n\n- **200 OK:** User added to the share list successfully.\n    \n- **400 Bad Request:** Invalid file ID, invalid user ID, the user is already shared with the file, or the user is the owner of the file.\n    \n\n``` json\n{\n    \"message\": \"The user is the owner of the file\"\n}\n\n ```\n\n``` json\n{\n    \"message\": \"The File is already shared with that user\"\n}\n\n ```\n\n- **404 Not Found:** File or user not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\" // If the file is not found\n}\n\n ```\n\n``` json\n{\n    \"message\": \"user/s not found\" // If the user is not found\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:{{port}}/api/files/share/:idFile/user/:idUser",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"files",
										"share",
										":idFile",
										"user",
										":idUser"
									],
									"variable": [
										{
											"key": "idFile",
											"value": "94",
											"description": "3"
										},
										{
											"key": "idUser",
											"value": "3"
										}
									]
								},
								"description": "### Remove User from File\n\nRemoves a user from the share list of a file. The authenticated user must be the owner of the file.\n\n**Possible Responses:**\n\n- **200 OK:** User removed from the share list successfully.\n    \n- **400 Bad Request:** Invalid file ID, invalid user ID, or the file is not shared with the specified user.\n    \n\n``` json\n{\n    \"message\": \"The File is not shared with that user\"\n}\n\n ```\n\n- **404 Not Found:** File or user not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\" // If the file is not found\n}\n\n ```\n\n``` json\n{\n    \"message\": \"user/s not found\" // If the user is not found\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
							},
							"response": []
						},
						{
							"name": "Get Share All",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:{{port}}/api/files/share",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"files",
										"share"
									]
								},
								"description": "### Get All Shared Files\n\nRetrieves a list of all files shared with the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Files retrieved successfully.\n    \n- **404 Not Found:** No shared files found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/files",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files"
							]
						},
						"description": "### Get All Files\n\nRetrieves a list of all files owned by the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Files retrieved successfully.\n    \n\n```\n[\n    {\n        \"id\": 1,\n        \"owner_id\": 1,\n        \"filename\": \"my_document.txt\",\n        \"shared\": false,\n        \"sharedWith\": [],\n        \"isDir\": false,\n        \"parentId\": null,\n        \"children\": [],\n        \"createdAt\": \"2023-12-28T21:31:10.426726Z\",\n        \"updatedAt\": \"2023-12-28T21:31:10.426726Z\"\n    }\n]    \n\n ```\n\n- **404 Not Found:** User has no files.\n    \n\n```\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Get File",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/files/:fileId",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "1730"
								}
							]
						},
						"description": "### Download a File\n\nDownloads a specific file owned by the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** File downloaded successfully.\n    \n- **404 Not Found:** File not found.\n    \n\n```\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/files/:fileId/info",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files",
								":fileId",
								"info"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "1730"
								}
							]
						},
						"description": "### Get File Information\n\nRetrieves information about a specific file owned by the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** File information retrieved successfully.\n    \n\n``` json\n{\n    \"id\": 1,\n    \"owner_id\": 1,\n    \"filename\": \"my_document.txt\",\n    \"shared\": false,\n    \"sharedWith\": [],\n    \"isDir\": false,\n    \"parentId\": null,\n    \"children\": [],\n    \"createdAt\": \"2023-12-28T21:31:10.426726Z\",\n    \"updatedAt\": \"2023-12-28T21:31:10.426726Z\"\n}   \n\n ```\n\n- **404 Not Found:** File not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/files/:fileId?force=yes",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files",
								":fileId"
							],
							"query": [
								{
									"key": "force",
									"value": "yes"
								}
							],
							"variable": [
								{
									"key": "fileId",
									"value": "10"
								}
							]
						},
						"description": "### Delete a File\n\nDeletes a specific file owned by the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** File deleted successfully.\n    \n- **400 Bad Request:** The file is shared with other users (use `force=yes` query parameter to override).\n    \n\n``` json\n{\n    \"message\": \"File is shared with other users\"\n}\n\n ```\n\n- **404 Not Found:** File not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Delete Batch",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    1780,\n    1781,\n    1782\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/api/files?force=yes",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files"
							],
							"query": [
								{
									"key": "force",
									"value": "yes"
								}
							]
						},
						"description": "### Delete Multiple Files\n\nDeletes multiple files owned by the authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Files deleted successfully.\n    \n- **400 Bad Request:** One or more files are shared with other users (use `force=yes` query parameter to override) or no file IDs provided\n    \n\n``` json\n{\n    \"message\": \"File is shared with other users\"\n}\n\n ```\n\n``` json\n{\n    \"message\": \"Invalid files ids\"\n}\n\n ```\n\n- **404 Not Found:** One or more files not found.\n    \n\n``` json\n{\n    \"message\": \"No files to delete\"\n}\n\n ```\n\n``` json\n{\n    \"message\": \"Some files do not exist\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filename\": \"ShareWithAll.png\",\n    \"shared\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/api/files/:fileId",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "1"
								}
							]
						},
						"description": "### Update a File\n\nUpdates file information (filename or shared status).\n\n**Possible Responses:**\n\n- **200 OK:** File updated successfully.\n    \n- **400 Bad Request:** Invalid file data (for example, attempting to change the file extension) or the file is shared with other users (use `force=yes` query parameter to override).\n    \n\n``` json\n{\n    \"message\": \"The extension of the file cannot be changed\"\n}\n\n ```\n\n``` json\n{\n    \"message\": \"File is shared with other users\" \n}\n\n ```\n\n- **404 Not Found:** File not found.\n    \n\n``` json\n{\n    \"message\": \"file/s not found\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Upload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "localhost:{{port}}/api/files/",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"files",
								""
							]
						},
						"description": "### Upload a File\n\nUploads one or more files for the authenticated user.\n\n**Possible Responses:**\n\n- **201 Created:** File(s) uploaded successfully.\n    \n- **400 Bad Request:** Invalid file data (or other file-related errors).\n    \n\n```\n{\n    \"message\": \"Invalid file data\"\n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				}
			],
			"description": "The Files section of the GoSF V2 API provides endpoints for you to manage your files effectively. You can upload, download, share, organize, and delete files securely.\n\n**Key Features:**\n\n- **File Uploads:** Upload single or multiple files with ease.\n    \n- **File Downloads:** Securely download your files.\n    \n- **File Sharing:** Share files with other GoSF V2 users while maintaining control over access.\n    \n- **File Management:** Update filenames, organize files into directories, and more.\n    \n- **Deletion:** Delete files when you no longer need them.\n    \n\n**Authentication**\n\nMost of the endpoints in this section require you to be authenticated using a valid JSON Web Token (JWT). You can obtain a JWT by logging in using the /api/auth/login endpoint. Please refer to the \"Authentication\" section at the beginning of this documentation for details on how to include your JWT in requests (Authorization header, cookie, or query parameter).\n\n**File Data Transfer Object (FileDTO)**\n\nMany File endpoints use a standardized FileDTO (File Data Transfer Object) to represent file information in requests and responses. The FileDTO structure is as follows:\n\n``` json\n{\n    \"id\": 1,                      // File ID\n    \"owner_id\": 1,                // Owner's User ID\n    \"filename\": \"document.txt\",   // File name\n    \"shared\": false,             // Shared status (true or false)\n    \"sharedWith\": [],            // Array of UserDTOs representing users the file is shared with\n    \"isDir\": false,              // Whether the file is a directory (true or false)\n    \"parentId\": null,             // Parent directory ID (null if no parent)\n    \"children\": [],              // Array of FileDTOs representing children (if a directory)\n    \"createdAt\": \"2023-12-27T18:35:16.638926Z\", // Creation timestamp\n    \"updatedAt\": \"2023-12-27T18:35:16.638926Z\"  // Last update timestamp\n}\n\n ```\n\n**Error Handling**\n\nThe Files API endpoints use standard HTTP status codes to indicate success or failure. The most common codes you'll encounter are:\n\n- **200 OK:** The request was successful.\n    \n- **201 Created:** A new resource (file) was created successfully.\n    \n- **400 Bad Request:** There was an error with the request, such as invalid data.\n    \n- **401 Unauthorized:** Authentication failed or a valid token was not provided.\n    \n- **403 Forbidden:** You do not have permission to access the requested resource (file).\n    \n- **404 Not Found:** The requested file was not found.\n    \n- **500 Internal Server Error:** There was an unexpected error on the server.\n    \n\nDetailed error messages and examples are provided in the documentation for each endpoint."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Rename User",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Joaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/api/users/rename",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"rename"
							],
							"query": [
								{
									"key": "filename",
									"value": "213955.png",
									"disabled": true
								}
							]
						},
						"description": "### Update Username\n\nUpdates the username of the currently authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Username updated successfully.\n    \n\n``` json\n{\n  \"id\": 1, \n  \"username\": \"jane.doe\" \n}\n\n ```\n\n- **400 Bad Request:** Invalid username or username already exists.\n    \n\n``` json\n{\n    \"message\": \"Username already exists\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User not found.\n    \n\n``` json\n{\n    \"message\": \"user/s not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"1234\",\n    \"new_password\": \"5678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/api/users/password",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"password"
							]
						},
						"description": "### Change Password\n\nChanges the password of the currently authenticated user.\n\n**Possible Responses:**\n\n- **204 No Content:** Password changed successfully.\n    \n- **400 Bad Request:** Invalid old password, new password does not meet requirements, or an error occurred while hashing the new password.\n    \n\n``` json\n{\n    \"message\": \"Current password is incorrect\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User not found.\n    \n\n``` json\n{\n    \"message\": \"user/s not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/users/",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "### Delete User\n\nDeletes the currently authenticated user account.\n\n**Possible Responses:**\n\n- **204 No Content:** User account deleted successfully.\n    \n- **400 Bad Request:** User has files and cannot be deleted.\n    \n\n``` json\n{\n    \"message\": \"You can't delete your account because you have files\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User not found.\n    \n\n``` json\n{\n    \"message\": \"user/s not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/users/me",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"me"
							]
						},
						"description": "### Get Current User\n\nRetrieves information about the currently authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** User information retrieved successfully.\n    \n\n``` json\n{\n  \"id\": 1, \n  \"username\": \"john.doe\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User not found.\n    \n\n``` json\n{\n    \"message\": \"user/s not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Upload Icon",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "icon",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "localhost:{{port}}/api/users/icon",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"icon"
							]
						},
						"description": "### Upload User Icon\n\nUploads a new icon for the currently authenticated user.\n\n**Possible Responses:**\n\n- **204 No Content:** Icon uploaded successfully.\n    \n- **400 Bad Request:**\n    \n    - Invalid file format: Only JPEG, PNG, and GIF images are supported.\n        \n    - File too large: The icon size exceeds the maximum allowed limit (512x512 pixels).\n        \n\n``` json\n{\n    \"message\": \"invalid image format, only jpeg/png/gif and png is supported\" \n}\n\n ```\n\n``` json\n{\n    \"message\": \"icon too large (max 512 x 512)\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section."
					},
					"response": []
				},
				{
					"name": "Delete Icon",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/users/icon",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"icon"
							]
						},
						"description": "### Delete User\n\nDeletes the currently authenticated user account.\n\n**Possible Responses:**\n\n- **204 No Content:** User account deleted successfully.\n    \n- **400 Bad Request:** User has files and cannot be deleted.\n    \n\n``` json\n{\n    \"message\": \"You can't delete your account because you have files\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User not found.\n    \n\n``` json\n{\n    \"message\": \"user/s not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get Icon",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/users/icon/me",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"icon",
								"me"
							]
						},
						"description": "### Get User Icon\n\nRetrieves the icon of the currently authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Icon retrieved successfully (returns the icon file data, which can be an SVG or a previously uploaded image).\n    \n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** User icon not found.\n    \n\n``` json\n{\n    \"message\": \"Icon not found\"\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "This section of the API documentation focuses on endpoints that allow you to manage user-related actions, including retrieving user details, updating usernames, changing passwords, deleting accounts, and managing user icons. All endpoints in this section, except for retrieving a user's icon by ID, require authentication using a valid JWT token obtained during login."
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"Joaco\",\n    \"password\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/auth/register",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"register"
							]
						},
						"description": "### `POST /auth/register`\n\nRegisters a new user.\n\n**JSON Expected (Request Body):**\n\n``` json\n{\n    \"username\": \"john.doe\", \n    \"password\": \"S0m3P@sswOrd!\"\n}\n\n ```\n\n**Possible Responses:**\n\n- **200 OK:** User created successfully.\n    \n\n``` json\n{\n    \"message\": \"User created successfully\"\n}\n\n ```\n\n- **400 Bad Request:** Invalid username or password, or username already exists.\n    \n\n``` json\n{\n    \"error\": \"code=400, message=Username already exists\",\n    \"message\": \"Username already exists\"\n}\n\n ```\n\n``` json\n{\n    \"error\": \"code=400, message=Username or password is empty\",\n    \"message\": \"Username or password is empty\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "LogOut",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/auth/logout?cookie=true",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"logout"
							],
							"query": [
								{
									"key": "cookie",
									"value": "true",
									"description": "Indicate to the server they should unset the HTTP-Only Auth Cookie "
								}
							]
						},
						"description": "### `DELETE /api/auth/logout`\n\nLogs out the user by invalidating the current JWT token.\n\n**Possible Responses:**\n\n- **200 OK:** Logout successful.\n    \n- **401 Unauthorized:** Invalid or expired token"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Set Token in the Enviroment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"Joaco\",\n    \"password\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/auth/login?cookie=true",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "cookie",
									"value": "true",
									"description": "Indicate to the server they should set the HTTP-Only Auth Cookie "
								}
							]
						},
						"description": "### `POST /auth/login`\n\nLogs in a user and returns a JWT.\n\n``` json\n    \"username\": \"john.doe\", \n    \"password\": \"S0m3P@sswOrd!\" \n}\n\n ```\n\n**Possible Responses**\n\n- **200 OK**: Login successful.\n    \n\n``` json\n{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpX0...\", \n    \"duration\": 30 \n}\n\n ```\n\n- **401 Unauthorized:** Invalid username or password.\n    \n\n``` json\n{\n    \"error\": \"code=401, message=Invalid username or password\",\n    \"message\": \"Invalid username or password\"\n}\n\n ```\n\n- **403 Forbidden**: Maximum tokens number reached for the user (the user should log out from other devices or restore the tokens).\n    \n\n``` json\n{\n    \"error\": \"code=403, message=max tokens reached for the user\",\n    \"message\": \"max tokens reached for the user\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Verify Auth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/auth/verify?cookie=true",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"verify"
							],
							"query": [
								{
									"key": "cookie",
									"value": "true"
								}
							]
						},
						"description": "### `GET /api/auth/verify`\n\nVerifies if the provided JWT token is valid. Requires a valid token.\n\n**Possible Responses:**\n\n- **200 OK:** Token is valid.\n    \n\n``` json\n{\n \"message\": \"You are authenticated\", \n \"durationRemaining\": 29\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Delete All Tokens",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"Joaco\",\n    \"password\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/auth/restore",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"restore"
							]
						},
						"description": "### `POST /api/auth/restore`\n\nDeletes all tokens associated with a user's credentials.\n\n**JSON Expected (Request Body):**\n\n``` json\n{\n    \"username\": \"john.doe\", \n    \"password\": \"S0m3P@sswOrd!\" \n}\n\n ```\n\n**Possible Responses:**\n\n- **200 OK:** All tokens deleted successfully.\n    \n- **401 Unauthorized:** Invalid username or password.\n    \n\n``` json\n{\n    \"error\": \"code=401, message=Invalid username or password\",\n    \"message\": \"Invalid username or password\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/auth/refresh?cookie=true",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"refresh"
							],
							"query": [
								{
									"key": "cookie",
									"value": "true"
								}
							]
						},
						"description": "### `GET /api/auth/refresh`\n\nRefreshes the JWT token, requiring a valid token in the `Authorization` header or as a query parameter (`api-token`) or cookie (`token`).\n\n**Possible Responses:**\n\n- **200 OK:** Token refreshed successfully. The response is the same as the `/api/auth/login` endpoint.\n    \n- **401 Unauthorized:** Invalid or expired token."
					},
					"response": []
				}
			],
			"description": "GoSF V2 provides flexible authentication options to access its API endpoints.\n\n**1\\. Authorization Header**\n\n``` bash\nAuthorization: Bearer <your_jwt_token>\n\n ```\n\nThis is the standard and recommended approach for most API interactions. After logging in successfully, you'll receive a JWT. Include this token in the Authorization header of subsequent requests.\n\n**2\\. HTTP-Only Cookie**\n\n``` bash\n/api/auth/login?cookie=true\n\n ```\n\nGoSF V2 allows you to store the JWT in a cookie named token. To enable this, include the cookie query parameter with any value (e.g., `?cookie=true`) in the request URL when logging in or refreshing the token (endpoints: `/api/auth/login` and `/api/auth/refresh`). Subsequent requests will then automatically use the JWT stored in this cookie.\n\n**3\\. Query Param**\n\n``` bash\n/api/files?api-token=<your_jwt_token>\n\n ```\n\nYou can also send the JWT as a query parameter named `api-token` with each request\n\n**Prioritization:**\n\nGoSF V2 will try to authenticate you using the following order of precedence:\n\n1. **Authorization Header:** First, it checks for a JWT in the Authorization header (using the Bearer scheme).\n    \n2. **Query Parameter:** If no valid token is found in the header, it looks for an api-token query parameter.\n    \n3. **Cookie:** Finally, if neither of the above methods is used, it checks for a JWT in the token cookie.\n    \n\n## **Authorization Errors**\n\nThis section outlines the error responses you might encounter if a JWT (JSON Web Token) is not correctly set in your API requests.\n\n**General Token Errors (Typically 401 Unauthorized)**\n\n| Error Message | Description | Potential Causes |\n| --- | --- | --- |\n| `{\"message\": \"Not token provided\"}` | No authentication token was provided in the request. | Missing `Authorization` header, `api-token` query parameter, or token cookie. |\n| `{\"message\": \"missing or malformed jwt\"}` | The token format is invalid (e.g., incorrect structure, missing segments). | Incorrect token structure, typos in the token string, or attempts to use an invalid token format. |\n| `{\"message\": \"invalid authorization header\"}` | The `Authorization` header is present but does not follow the expected `Bearer` format. | Missing or incorrect \"Bearer\" prefix in the `Authorization` header (should be: `Authorization: Bearer` ). |\n| `{\"message\": \"Unauthorized\"}` | This generic message often indicates an invalid or expired token, or a token with an invalid signature. The server might not provide detailed reasons. | Expired token, incorrect secret key used to generate the token, or other internal validation failures. |\n\n**Token Not Found in Store (401 Unauthorized or 404 Not Found)**\n\n| Error Message | Description | Potential Causes |\n| --- | --- | --- |\n| `{\"message\": \"the token is not valid for the current session\"}` | The token might have been valid previously, but it's no longer found in the token store (e.g., Redis). | The user logged out, the token was manually revoked, or the token storage mechanism experienced an error. |\n| `{\"message\": \"token/s not found in the database for the user\"}` | This message more explicitly indicates that the token is not found in the database used for token storage. | Similar causes as the previous error, emphasizing that the token is not present in the persistent storage. |\n\n**Token Store Limit Reached (403 Forbidden)**\n\n| Error Message | Description | Potential Causes |\n| --- | --- | --- |\n| `{\"message\": \"max tokens reached for the user\"}` | The user has exceeded the maximum number of allowed active tokens. | The user has logged in from too many devices or locations, and the token store limit (defined in your application's configuration) has been reached. |"
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Get Note",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:{{port}}/api/notes",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"notes"
							]
						},
						"description": "### Get User Note\n\nRetrieves the content of the note associated with the currently authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Note retrieved successfully.\n    \n\n``` json\n{\n  \"content\": \"This is my note content.\" \n}\n\n ```\n\n- **401 Unauthorized:** Authentication failed or the token is invalid. See the \"Authentication\" section.\n    \n- **404 Not Found:** No note found for the user. This likely means a note hasn't been created yet.\n    \n\n``` json\n{\n    \"message\": \"note not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Set Note",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hola Mundo!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:{{port}}/api/notes",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"notes"
							]
						},
						"description": "### Create/Update User Note\n\nCreates a new note or updates the existing note for the currently authenticated user.\n\n**Possible Responses:**\n\n- **200 OK:** Note created or updated successfully.\n    \n\n``` json\n{\n  \"content\": \"This is my updated note content.\" \n}\n\n ```\n\n- **400 Bad Request:** The request body is missing the \"content\" field, or the content is invalid.\n    \n\n``` json\n{\n    \"message\": \"Missing or Invalid content field\" \n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "This part of the API documentation covers how to interact with user notes. Currently, the API provides a simplified way to manage a single note per user. You can retrieve, create or update the content of your notes."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}